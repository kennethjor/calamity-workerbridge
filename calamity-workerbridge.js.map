{"version":3,"sources":["calamity-workerbridge.coffee"],"names":[],"mappings":"AAAA,IAAA;iSAAA;;AAAA,QAAc,CAAC;AACd,iCAAA,CAAA;;AAAA,EAAA,YAAC,CAAA,OAAD,GAAU,WAAV,CAAA;;AAAA,EACA,QAAQ,CAAC,OAAT,CAAiB,YAAC,CAAA,SAAlB,CADA,CAAA;;AAAA,yBAGA,UAAA,GAAY,IAHZ,CAAA;;AAAA,yBAIA,OAAA,GAAS,IAJT,CAAA;;AAAA,yBAKA,SAAA,GAAW,KALX,CAAA;;AAOa,EAAA,sBAAC,GAAD,EAAM,SAAN,GAAA;;MAAM,YAAY;KAC9B;AAAA,IAAA,IAAA,CAAA,QAA8D,CAAC,YAAY,CAAC,WAAtB,CAAA,CAAtD;AAAA,YAAU,IAAA,KAAA,CAAM,8BAAN,CAAV,CAAA;KAAA;AAAA,IACA,8CAAM,GAAN,CADA,CAAA;AAAA,IAEA,IAAC,CAAA,UAAD,GAAc,SAFd,CAAA;AAAA,IAGA,IAAC,CAAA,WAAD,CAAA,CAHA,CADY;EAAA,CAPb;;AAAA,yBAcA,WAAA,GAAa,SAAA,GAAA;AACZ,QAAA,YAAA;AAAA,IAAA,MAAA,GAAS,IAAC,CAAA,OAAD,GAAe,IAAA,YAAA,CAAa,IAAC,CAAA,UAAd,CAAxB,CAAA;AAAA,IACA,IAAA,GAAO,MAAM,CAAC,IADd,CAAA;AAAA,IAGA,IAAI,CAAC,gBAAL,CAAsB,SAAtB,EAAiC,CAAC,CAAA,SAAA,KAAA,GAAA;aAAA,SAAC,GAAD,GAAA;eAAS,KAAC,CAAA,mBAAD,CAAqB,GAArB,EAAT;MAAA,EAAA;IAAA,CAAA,CAAA,CAAA,IAAA,CAAD,CAAjC,EAAsE,KAAtE,CAHA,CAAA;AAAA,IAKA,IAAI,CAAC,WAAL,CAAiB,EAAjB,CALA,CAAA;WAMA,IAAI,CAAC,KAAL,CAAA,EAPY;EAAA,CAdb,CAAA;;AAAA,yBAwBA,mBAAA,GAAqB,SAAC,GAAD,GAAA;AACpB,QAAA,IAAA;AAAA,IAAC,OAAQ,IAAR,IAAD,CAAA;AAEA,IAAA,IAAG,CAAA,IAAE,CAAA,SAAF,IAAgB,IAAA,KAAQ,MAA3B;AACC,MAAA,IAAC,CAAA,SAAD,GAAa,IAAb,CAAA;AAAA,MACA,IAAC,CAAA,OAAD,CAAS,SAAT,CADA,CAAA;AAEA,YAAA,CAHD;KAFA;WAOA,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,MAAA,CAAA,IAAxB,EAAqC,IAArC,EARoB;EAAA,CAxBrB,CAAA;;AAAA,EAmCA,YAAC,CAAA,WAAD,GAAe,SAAA,GAAA;AAAG,WAAO,CAAA,CAAC,MAAO,CAAC,YAAhB,CAAH;EAAA,CAnCf,CAAA;;sBAAA;;GADmC,QAAQ,CAAC,OAA7C,CAAA","file":"calamity-workerbridge.js","sourceRoot":"/source/","sourcesContent":["class calamity.WorkerBridge extends calamity.Bridge\n\t@version: \"%version%\"\n\tcalamity.emitter @prototype\n\n\t_workerUrl: null\n\t_worker: null\n\tconnected: false\n\n\tconstructor: (bus, workerUrl = \"calamity-workerbridge-worker.js\") ->\n\t\tthrow new Error \"Shared workers not supported\" unless calamity.WorkerBridge.isSupported()\n\t\tsuper bus\n\t\t@_workerUrl = workerUrl\n\t\t@_initWorker()\n\n\t# Initialises the worker.\n\t_initWorker: ->\n\t\tworker = @_worker = new SharedWorker @_workerUrl\n\t\tport = worker.port\n\t\t# Attach message handler.\n\t\tport.addEventListener \"message\", ((msg) => @handleWorkerMessage msg), false\n\t\t# Start port.\n\t\tport.postMessage \"\"\n\t\tport.start()\n\n\t# Handles a message coming in from the worker.\n\thandleWorkerMessage: (msg) ->\n\t\t{data} = msg\n\t\t# Register a live connection when a pong is received.\n\t\tif !@connected and data is \"pong\"\n\t\t\t@connected = true\n\t\t\t@trigger \"connect\"\n\t\t\treturn\n\t\t# Handle normal messages.\n\t\tconsole.log \"Message:\", typeof data, data\n\n\t# Returns true is shared web workers are supported.\n\t@isSupported = -> return !!window.SharedWorker\n"]}